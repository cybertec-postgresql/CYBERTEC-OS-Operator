// Code generated by MockGen. DO NOT EDIT.
// Source: volumes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	volumes "github.com/cybertec-postgresql/cybertec-pg-operator/pkg/util/volumes"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockVolumeResizer is a mock of VolumeResizer interface.
type MockVolumeResizer struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeResizerMockRecorder
}

// MockVolumeResizerMockRecorder is the mock recorder for MockVolumeResizer.
type MockVolumeResizerMockRecorder struct {
	mock *MockVolumeResizer
}

// NewMockVolumeResizer creates a new mock instance.
func NewMockVolumeResizer(ctrl *gomock.Controller) *MockVolumeResizer {
	mock := &MockVolumeResizer{ctrl: ctrl}
	mock.recorder = &MockVolumeResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeResizer) EXPECT() *MockVolumeResizerMockRecorder {
	return m.recorder
}

// ConnectToProvider mocks base method.
func (m *MockVolumeResizer) ConnectToProvider() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToProvider")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToProvider indicates an expected call of ConnectToProvider.
func (mr *MockVolumeResizerMockRecorder) ConnectToProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToProvider", reflect.TypeOf((*MockVolumeResizer)(nil).ConnectToProvider))
}

// DescribeVolumes mocks base method.
func (m *MockVolumeResizer) DescribeVolumes(providerVolumesID []string) ([]volumes.VolumeProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumes", providerVolumesID)
	ret0, _ := ret[0].([]volumes.VolumeProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumes indicates an expected call of DescribeVolumes.
func (mr *MockVolumeResizerMockRecorder) DescribeVolumes(providerVolumesID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumes", reflect.TypeOf((*MockVolumeResizer)(nil).DescribeVolumes), providerVolumesID)
}

// DisconnectFromProvider mocks base method.
func (m *MockVolumeResizer) DisconnectFromProvider() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectFromProvider")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectFromProvider indicates an expected call of DisconnectFromProvider.
func (mr *MockVolumeResizerMockRecorder) DisconnectFromProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromProvider", reflect.TypeOf((*MockVolumeResizer)(nil).DisconnectFromProvider))
}

// ExtractVolumeID mocks base method.
func (m *MockVolumeResizer) ExtractVolumeID(volumeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractVolumeID", volumeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractVolumeID indicates an expected call of ExtractVolumeID.
func (mr *MockVolumeResizerMockRecorder) ExtractVolumeID(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractVolumeID", reflect.TypeOf((*MockVolumeResizer)(nil).ExtractVolumeID), volumeID)
}

// GetProviderVolumeID mocks base method.
func (m *MockVolumeResizer) GetProviderVolumeID(pv *v1.PersistentVolume) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderVolumeID", pv)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderVolumeID indicates an expected call of GetProviderVolumeID.
func (mr *MockVolumeResizerMockRecorder) GetProviderVolumeID(pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderVolumeID", reflect.TypeOf((*MockVolumeResizer)(nil).GetProviderVolumeID), pv)
}

// IsConnectedToProvider mocks base method.
func (m *MockVolumeResizer) IsConnectedToProvider() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectedToProvider")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectedToProvider indicates an expected call of IsConnectedToProvider.
func (mr *MockVolumeResizerMockRecorder) IsConnectedToProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectedToProvider", reflect.TypeOf((*MockVolumeResizer)(nil).IsConnectedToProvider))
}

// ModifyVolume mocks base method.
func (m *MockVolumeResizer) ModifyVolume(providerVolumeID string, newType *string, newSize, iops, throughput *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyVolume", providerVolumeID, newType, newSize, iops, throughput)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyVolume indicates an expected call of ModifyVolume.
func (mr *MockVolumeResizerMockRecorder) ModifyVolume(providerVolumeID, newType, newSize, iops, throughput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyVolume", reflect.TypeOf((*MockVolumeResizer)(nil).ModifyVolume), providerVolumeID, newType, newSize, iops, throughput)
}

// ResizeVolume mocks base method.
func (m *MockVolumeResizer) ResizeVolume(providerVolumeID string, newSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", providerVolumeID, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockVolumeResizerMockRecorder) ResizeVolume(providerVolumeID, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockVolumeResizer)(nil).ResizeVolume), providerVolumeID, newSize)
}

// VolumeBelongsToProvider mocks base method.
func (m *MockVolumeResizer) VolumeBelongsToProvider(pv *v1.PersistentVolume) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeBelongsToProvider", pv)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VolumeBelongsToProvider indicates an expected call of VolumeBelongsToProvider.
func (mr *MockVolumeResizerMockRecorder) VolumeBelongsToProvider(pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeBelongsToProvider", reflect.TypeOf((*MockVolumeResizer)(nil).VolumeBelongsToProvider), pv)
}
